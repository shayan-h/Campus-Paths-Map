## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode

- r = p * q:
    - Set r = 0
    - {inv1: r = 0 | r = p_0 * q_0 + p_0 * q_1 + ... + p_1 * q_0 + p_1 * q_1 + ... + p_i * q_j where q_j is the jth term in q and p_i is the ith term in p}
    - for each term t_p in p:
        - {inv2: r = 0 | r = p_i * q_0 + p_i * q_1 + ... + p_i * q_j where q_j is the jth term in q and p_i is the ith term in p}
        - for each term t_q in q:
            - if t_p & t_q have degrees,
                - then calculate sum of their degrees and products of their coefficients and add to r
            - else if only one of t_p or t_q has a degree,
                - then multiply the term's coefficient which has a degree with the constant term and add to r
            - else multiply both constant terms and add to r

2. Division Pseudocode

- quo = p / q - rem
    - set rem = poly p
    - set quo = 0
    - set term = 0
    - set degRem = rem.degree()
    - {inv}
    - while the degree rem >= the degree of q:
        - if first iteration of loop,
            - then term = divide p_0 by q_0, add term to quo
            - multiply term with poly q
        - else (every other iteration),
            - term = divide rem_0 by q_0, add term to quo
            - multiply term with poly q
        - rem = rem - term
        - set degRem = rem.degree() (if rem is a constant then degree is 0)
    - return quo

3. Division Example: (x3+x-1) / (x+1) = x2-x+2

- p = x^3+x-1
- q = x+1
- rem = copy of p = x^3+x-1
- quo = 0
- term = 0
- degRem = 3
    - (p and q don't change)
    - while degRem >= q.degree() (q.degree() = 1)
        - Iteration 1: rem = x^3+x-1, quo = 0, term = 0, degRem = 3
            - if first iteration, YES term = x^2, quo = x^2, term = x^3+x^2
            - rem = -x^2+x-1
            - degRem = 2
        - Iteration 2: rem = -x^2+x-1, quo = x^2, term = x^3+x^2, degRem = 2
            - else (every other iteration), YES term = -x, quo = x^2-x, term = -x^2-x
            - rem = 2x-1
            - degRem = 1
        - Iteration 3: 2x-1, quo = x^2-x, term = -x^2-x, degRem = 1
            - else (every other iteration), YES term = 2, quo = x^2-x+2, term = 2x+2
            - rem = -3
            - degRem = 0 because rem is a constant
    - loop ends because degRem < q.degree()
    - return quo = x^2-x+2



## Part 1
###########################################################################

1. Weakened Rep Invariant



2. Alternate add, sub, mul, div



3. Constructor checkReps




## Part 2
###########################################################################

1. Calls to checkRep in RatTerm



2. Weakened Rep Invariant



3. Alternate Rep Invariant



4. Preferred Invariants




## Part 3
###########################################################################

1. Calls to checkRep in RatPoly



2. Alternate Representation



