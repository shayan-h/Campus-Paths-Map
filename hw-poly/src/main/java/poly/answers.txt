## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode

- r = p * q:
    - Set r = 0
    - {inv1: r = 0 | r = p_0 * q_0 + p_0 * q_1 + ... + p_1 * q_0 + p_1 * q_1 + ... + p_i * q_j where q_j is the jth term in q and p_i is the ith term in p}
    - for each term t_p in p:
        - {inv2: r = 0 | r = p_i * q_0 + p_i * q_1 + ... + p_i * q_j where q_j is the jth term in q and p_i is the ith term in p}
        - for each term t_q in q:
            - if t_p & t_q have degrees,
                - then calculate sum of their degrees and products of their coefficients and add to r
            - else if only one of t_p or t_q has a degree,
                - then multiply the term's coefficient which has a degree with the constant term and add to r
            - else multiply both constant terms and add to r

2. Division Pseudocode

- quo = p / q - rem
    - set rem = poly p
    - set quo = 0
    - set term = 0
    - set degRem = rem.degree()
    - {inv: quo == 0 || quo p_0 / q_0}
    - while the degree rem >= the degree of q and the degree of rem is not 0:
        - term = divide rem_0 by q_0, add term to quo
        - multiply term with poly q
        - rem = rem - term
        - set degRem = rem.degree() (if rem is a constant then degree is 0)
    - * Loop end *
    - if degree rem or the degree of q is equal to 0,
        - then, term = divide rem_0 by q_0, add term to quo
    - return quo

3. Division Example: (x3+x-1) / (x+1) = x2-x+2

- p = x^3+x-1
- q = x+1
- rem = copy of p = x^3+x-1
- quo = 0
- term = 0
- degRem = 3
    - (p and q don't change)
    - while degRem >= q.degree() && degRem != 0 (q.degree() = 1)
        - Iteration 1: rem = x^3+x-1, quo = 0, term = 0, degRem = 3
            - term = x^2, quo = x^2, term = x^3+x^2
            - rem = -x^2+x-1
            - degRem = 2
        - Iteration 2: rem = -x^2+x-1, quo = x^2, term = x^3+x^2, degRem = 2
            - term = -x, quo = x^2-x, term = -x^2-x
            - rem = 2x-1
            - degRem = 1
        - Iteration 3: 2x-1, quo = x^2-x, term = -x^2-x, degRem = 1
            - term = 2, quo = x^2-x+2, term = 2x+2
            - rem = -3
            - degRem = 0 because rem is a constant
    - loop ends because degRem < q.degree()
    - * if condition does not apply *
    - return quo = x^2-x+2



## Part 1
###########################################################################

1. Weakened Rep Invariant

The 2nd RatNum constructor does not need to call the gcd method to reduce the fraction by g so those few lines of code can be removed. There are
no negative side effects to removing this chunk of code.

The if condition inside the checkRep() method can also be removed as we no longer require it to be enforced wherever checkRep() may be called.
This change affects the code wherever checkRep() is called but will ensure that the fraction being in reduced form is not demanded anywhere in
the class.

For the toString method, I would copy over the chunk of code previously in the RatNum constructor to above the condition clauses in toString.
This would reduce the fraction only for this method to return a string, but it won't reduce the RatNum itself.


2. Alternate add, sub, mul, div

The methods would now take in numerExpr and denomExpr as parameters and the Spec.requires would need to change to params != null. If the denomExpr is equal to
0 then it will not meet the spec because it did not construct a new ratnum.



3. Constructor checkReps

It is not required to call checkRep at the start of the first constructor because the constructor, and it's content ensure that the
rep invariant is satisfied by making the denom = 1. Since the first constructor only takes in a numer, the fraction is always in reduced form.
The second contructor also makes sure that the rep invariant is satisfied by changing any negative numer or denom input into positive integers
by double negating it. It also uses gcd to reduce the fraction.



## Part 2
###########################################################################

1. Calls to checkRep in RatTerm

I included the calls to checkRep at the beginning and end of every public method that is not a constructor because these methods are going to be used by the client repeatedly so it
is safer to include them in every method so that there are not mistakes being made in regards to the rep invariant being met.


2. Weakened Rep Invariant

Firstly, the ratTerm constructor will need to change because the condition states that if the provided coeff is 0 then it automatically assigns the expt to 0
as well. This constructor can instead let the expt input be the expt, regardless of what the coeff is. This change should affect the rest of the code.

These changes are not reliable because something with a 0 coeff should not be allowed to have an expt that is > 0 because it won't matter what that expt is, the
term will always evaluate to 0.


3. Alternate Rep Invariant

The isNaN method would change because if we are saying a term is NaN also has the expt 0, we would want to add a condition for that so when checkRep is called,
we know that all the rep invariants are met. This change in the rep invariant would affect the code in terms of additional checks to be made in methods of the code.

I would also add a condition in the contractor of ratTerm to make something happen if the coeff is NaN. Right now, only a condition for if it is zero is present, but by
adding another condition for this new invariant, we can also make sure that the expt is 0 to meet the rep invariant. These changes should handle the other methods like add, sub,
etc. I believe this new rep invariant does not do any harm and it is easy to implement throughout the code.


## Part 3
###########################################################################

1. Calls to checkRep in RatPoly

I included calls to checkRep at the start and end of each public method (before returning), other than the start of constructors, just to make sure that all the outputs and all the inputs
met the rep invariants so the code worked as said in the specification.


2. Alternate Representation

I think the advantages of using this alternate form of representation for RatPoly is that it might be easier to implement things like sorting the terms
because it would just be like sorting regular old lists and overall I am more familiar with lists, so granted I would have to work with two different lists
and that would make things complicated, but I would at least be familiar with the structure and I also would not have to worry too much about the object type: RatTerm
when implementing the functions; making sure I am putting in the right term as input. I could see a hashmap with key and value pairs working better with this. I believe
using RatTerm was far better though because many methods from RatTerm were very useful, quick, and efficient in terms of how much code we wrote. Using the list
representation would increase the amount of code we would need to type and using RatTerm was very simple in a lot of ways and quick.

